-- PostgreSQL 17 compatible script

-- 1. Table: UsersRole (Роли пользователей)
CREATE TABLE UsersRole (
    RoleId INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    RoleName VARCHAR(50) NOT NULL UNIQUE
);

-- 2. Table: Users (Пользователи)
CREATE TABLE Users (
    UserID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Username VARCHAR(50) NOT NULL UNIQUE,
    PasswordHash VARCHAR(255) NOT NULL,
    Email VARCHAR(100) NOT NULL UNIQUE,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    RoleId INT NOT NULL,
    CONSTRAINT fk_user_role FOREIGN KEY (RoleId) REFERENCES UsersRole (RoleId)
);

-- 3. Table: Venues (Места проведения)
CREATE TABLE Venues (
    VenueID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Address VARCHAR(255),
    City VARCHAR(100),
    Capacity INT
);

-- 5. Table: ManifestType (Тип планировки)
CREATE TABLE ManifestTypes (
    ManifestTypeId INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ManifestTypeName VARCHAR(100) NOT NULL UNIQUE
);

-- 4. Table: Manifests (Схемы зала/Планировки)
CREATE TABLE Manifests (
    ManifestID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    VenueID INT NOT NULL,
    ManifestTypeId INT NOT NULL,
    Description TEXT, -- Consider JSONB if storing structured JSON data
    CONSTRAINT fk_manifest_venue FOREIGN KEY (VenueID) REFERENCES Venues (VenueID),
    CONSTRAINT fk_manifest_type FOREIGN KEY (ManifestTypeId) REFERENCES ManifestTypes (ManifestTypeId)
);

-- 7. Table: SeatTypes (Типы посадочных мест)
CREATE TABLE SeatTypes (
    SeatTypeId INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    SeatTypeName VARCHAR(100) NOT NULL UNIQUE
);

-- 6. Table: Seats (Места)
CREATE TABLE Seats (
    SeatID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ManifestID INT NOT NULL,
    SectionName VARCHAR(50), -- Nullable based on original schema
    RowNumber INT NOT NULL,
    SeatNumber INT NOT NULL,
    SeatTypeId INT NOT NULL,
    CONSTRAINT fk_seat_manifest FOREIGN KEY (ManifestID) REFERENCES Manifests (ManifestID),
    CONSTRAINT fk_seat_type FOREIGN KEY (SeatTypeId) REFERENCES SeatTypes (SeatTypeId),
    CONSTRAINT uq_seat_location UNIQUE (ManifestID, SectionName, RowNumber, SeatNumber) -- Ensures uniqueness within a manifest
);

-- 9. Table: EventStatuses (Статус события)
CREATE TABLE EventStatuses (
    EventStatusId INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EventStatusName VARCHAR(100) NOT NULL UNIQUE
);

-- 8. Table: Events (Мероприятия)
CREATE TABLE Events (
    EventID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR(255) NOT NULL,
    EventDateTime TIMESTAMP NOT NULL, -- Changed from DATETIME
    VenueID INT NOT NULL,
    ManifestID INT NOT NULL,
    Description TEXT,
    EventStatusId INT NOT NULL,
    CONSTRAINT fk_event_venue FOREIGN KEY (VenueID) REFERENCES Venues (VenueID),
    CONSTRAINT fk_event_manifest FOREIGN KEY (ManifestID) REFERENCES Manifests (ManifestID),
    CONSTRAINT fk_event_status FOREIGN KEY (EventStatusId) REFERENCES EventStatuses (EventStatusId)
);

-- 10. Table: Offers (Предложения)
CREATE TABLE Offers (
    OfferID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EventID INT NOT NULL,
    OfferName VARCHAR(100) NOT NULL,
    Description TEXT,
    ValidFrom TIMESTAMP, -- Changed from DATETIME
    ValidTo TIMESTAMP,   -- Changed from DATETIME
    IsActive BOOLEAN,
    CONSTRAINT fk_offer_event FOREIGN KEY (EventID) REFERENCES Events (EventID)
);

-- 11. Table: PriceLevels (Ценовые уровни)
CREATE TABLE PriceLevels (
    PriceLevelID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    LevelName VARCHAR(50) NOT NULL UNIQUE
);

-- 12. Table: OfferPrices (Цены предложения)
CREATE TABLE OfferPrices (
    OfferPriceID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    OfferID INT NOT NULL,
    PriceLevelID INT NOT NULL,
    Price DECIMAL(10, 2) NOT NULL,
    CONSTRAINT fk_offerprice_offer FOREIGN KEY (OfferID) REFERENCES Offers (OfferID),
    CONSTRAINT fk_offerprice_pricelevel FOREIGN KEY (PriceLevelID) REFERENCES PriceLevels (PriceLevelID),
    CONSTRAINT uq_offer_pricelevel UNIQUE (OfferID, PriceLevelID) -- Unique price per offer and level
);

-- 14. Table: PurchaseStatuses (Статус заказа) -- Corrected typo
CREATE TABLE PurchaseStatuses (
    PurchaseStatusId INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Corrected typo
    PurchaseStatusName VARCHAR(50) NOT NULL UNIQUE -- Corrected typo
);

-- 13. Table: Purchases (Покупки)
CREATE TABLE Purchases (
    PurchaseID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    UserID INT NOT NULL,
    PurchaseDateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Changed from DATETIME
    TotalPrice DECIMAL(10, 2) NOT NULL,
    PurchaseStatusId INT NOT NULL, -- Corrected typo
    CONSTRAINT fk_purchase_user FOREIGN KEY (UserID) REFERENCES Users (UserID),
    CONSTRAINT fk_purchase_status FOREIGN KEY (PurchaseStatusId) REFERENCES PurchaseStatuses (PurchaseStatusId) -- Corrected typo
);

-- 16. Table: TicketStatuses (Статус билета)
CREATE TABLE TicketStatuses (
    TicketStatusId INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TicketStatusName VARCHAR(50) NOT NULL UNIQUE
);

-- 15. Table: Tickets (Билеты)
CREATE TABLE Tickets (
    TicketID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    PurchaseID INT, -- Nullable, so FK should allow NULLs
    EventID INT NOT NULL,
    SeatID INT NOT NULL,
    OfferPriceID INT NOT NULL,
    TicketCode VARCHAR(100) NOT NULL UNIQUE,
    CreatedDateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Changed from DATETIME
    TicketStatusId INT NOT NULL, -- Assuming status is always required
    CONSTRAINT fk_ticket_purchase FOREIGN KEY (PurchaseID) REFERENCES Purchases (PurchaseID),
    CONSTRAINT fk_ticket_event FOREIGN KEY (EventID) REFERENCES Events (EventID),
    CONSTRAINT fk_ticket_seat FOREIGN KEY (SeatID) REFERENCES Seats (SeatID),
    CONSTRAINT fk_ticket_offerprice FOREIGN KEY (OfferPriceID) REFERENCES OfferPrices (OfferPriceID),
    CONSTRAINT fk_ticket_status FOREIGN KEY (TicketStatusId) REFERENCES TicketStatuses (TicketStatusId),
    CONSTRAINT uq_event_seat UNIQUE (EventID, SeatID) -- Prevent selling the same specific seat twice for an event
);

